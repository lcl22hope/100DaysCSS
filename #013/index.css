html, body {
    height: 100%;
    display: flex;
    align-items: center;
    justify-content: center;
    background-color: brown;
}

.coffee {
    display: flex;  
    flex-direction: column;
    align-items: center;
    height: calc(9em + 1em + 2em);
    position: relative;
}

.coffee .cup {
    width: 10em;
    height: 9cm;
    background-color: white;
    border-bottom-color: white;
    border-bottom-left-radius: 1.5em;
    border-bottom-right-radius: 1.5em;
    position: relative;
}

/* 伪元素画出杯口 */

.coffee .cup::before {
    content: "";
    position: absolute;
    width: 100%;
    height: 2em;
    background-color: chocolate;
    border: 0.5em solid white;
    box-sizing: border-box;
    border-radius: 50%;
    top: -1em;
    box-shadow: inset 0 0 1em rgba(0, 0, 0, 0.5);
}

/*  
    box-sizing 属性允许您以特定的方式定义匹配某个区域的特定元素。
    例如，假如您需要并排放置两个带边框的框，可通过将 box-sizing 设置为 "border-box"。
    这可令浏览器呈现出带有指定宽度和高度的框，并把边框和内边距放入框中 
*/

/* 画出杯把子 */
.coffee .cup::after {
    content: "";
    position: absolute;
    width: 3em;
    height: 3.5em;
    border: 0.8em solid white;
    border-radius: 50%;
    top: 20%;
    left: 80%;
}

/* 托盘 */
.coffee .plate {
    width: 16em;
    height: 1em;
    background-color: white;
    border-bottom-left-radius: 50%;
    border-bottom-right-radius: 50%;
    position: absolute;
    bottom: -1px;
}


.coffee .vapor {
    width: 7em;
    display: flex;
    justify-content: space-between;
}

.coffee .vapor span {
    width: 0.1em;
    min-width: 1px;
    height: 2em;
    background-color: white;
    animation: evaporation 2s linear infinite;
    filter: opacity(0);
}

.coffee .vapor span:nth-child(1) {
    animation-delay: 0.5s;
}

.coffee .vapor span:nth-child(2) {
    animation-delay: 0.1s;
}

.coffee .vapor span:nth-child(3) {
    animation-delay: 0.3s;
}

.coffee .vapor span:nth-child(4) {
    animation-delay: 0.4s;
}

.coffee .vapor span:nth-child(5) {
    animation-delay: 0.2s;
}

@keyframes evaporation {
    from {
        transform: translateY(0);
        filter: opacity(1) blur(0.2em);
    }

    to {
        transform: translateY(-4em);
        filter: opacity(0) blur(0.4em);
    }
}


